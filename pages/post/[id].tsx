import Head from "next/head";
import { useRouter } from "next/router";
import React, { useCallback, useEffect, useState } from "react";
import Button from "../../components/Button/Button";
import { useCreateAClubModal } from "../../context/CreateAClubContextProvider";
import { useIdea } from "../../hooks/useIdeasOfClub";
import { getEllipsisTxt, nFormatter } from "../../utils";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { useWeb3ExecuteFunction } from "react-moralis";
import useToast from "../../hooks/useToast";
import ClubContractAbi from "../../constants/abis/ClubContract.json";
import useVote from "../../hooks/useVote";

const Post = () => {
  const router = useRouter();
  const { id } = router.query;
  const idea = useIdea(typeof id === "string" ? id : "");

  const [metadata, setMetadata] = useState<string>();
  const [metadataError, setMetadataError] = useState(false);

  const [comment, setComment] = useState("");
  const { txSuccess, txWaiting, error: errorToast } = useToast();

  const { open, setOpen } = useCreateAClubModal();

  useEffect(() => {
    const metadataUrl = idea?.metadata;
    if (!metadataUrl || metadataUrl === "") return;
    if (metadata) return;
    fetch(metadataUrl)
      .then((res) => res.json())
      .then((res) => setMetadata(res.description))
      .catch((err) => {
        setMetadata(metadataUrl);
        setMetadataError(true);
      });
  }, [idea]);

  const contractProcessor = useWeb3ExecuteFunction();

  const commentTx = useCallback(async () => {
    if (comment.length < 5) return;
    if (typeof id === "string") {
      const address = id.split("-")[0];
      const _index = id.split("-")[1];
      let options = {
        contractAddress: address,
        functionName: "postComment",
        abi: ClubContractAbi,
        params: {
          _index,
          _metadata: comment,
        },
      };
      await contractProcessor.fetch({
        params: options,
        onSuccess: () => {
          txSuccess("Commented", "");
        },
        onError: (error) => {
          errorToast("Error");
          console.log(error);
        },
      });
    }
  }, [contractProcessor, comment, id]);

  const address = typeof id === "string" ? id.split("-")[0] : "";
  const index = typeof id === "string" ? id.split("-")[1] : "";

  const { vote } = useVote({ address, index });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col-reverse lg:flex-row mt-2 lg:mt-4 px-4 max-w-[1340px] mx-auto">
        <div className="w-full">
          <div className="flex items-center">
            <div className="flex items-center opacity-50 h-full mr-2">
              <div className="flex-col flex items-center">
                <button className="cursor-pointer" onClick={() => vote()}>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={2.5}
                    stroke="currentColor"
                    className="w-6 h-6 -mb-2.5"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M4.5 15.75l7.5-7.5 7.5 7.5"
                    />
                  </svg>
                </button>
                {idea?.score && nFormatter(idea?.score, 4)}
              </div>
            </div>
            <h1 className="font-extrabold text-3xl w-full max-w-xl ">
              {idea?.message && idea?.message}
            </h1>
          </div>
          <div className="flex items-center mt-1.5">
            <div className="flex items-center">
              {/* {displayOfClub ? (
                  <img src={displayOfClub} className="w-6 h-6 rounded" />
                ) : (
                  <div className="w-6 h-6 bg-orange-300 rounded" />
                )} */}
              <span className="font-bold text-xs ml-1 opacity-60">
                {"clubName"} |
              </span>

              <span className="font-bold text-xs ml-1 opacity-60">
                Posted by {idea?.user && getEllipsisTxt(idea?.user)}
              </span>
            </div>
            <button className="ml-1 opacity-30 flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-4 h-4"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 011.037-.443 48.282 48.282 0 005.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"
                />
              </svg>
              <p className="text-[10px] ml-1">
                {idea?.commentsCount && idea?.commentsCount} Comments
              </p>
            </button>
          </div>

          <div className="mt-4">
            <ReactMarkdown remarkPlugins={[remarkGfm]}>
              {metadata ?? ""}
            </ReactMarkdown>
          </div>
          <div className="mt-16">
            <div className="w-full max-w-sm">
              <input
                className="text-xs mb-2 w-full active:outline-primary focus:outline-primary px-4 py-1.5 rounded-md bg-[#f8f8f8] border border-lightGray"
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                placeholder="Comments"
              />
              <Button onClick={() => commentTx()}>Comment</Button>
            </div>
            <div className="mt-4">
              <h4 className="font-bold">Comments</h4>
              {idea?.comments?.map((comment) => (
                <div key={comment.id}>
                  <span className="text-[10px]">
                    {getEllipsisTxt(comment.user)}
                  </span>
                  <h4 className="text-sm font-bold">
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {comment.metadata}
                    </ReactMarkdown>
                  </h4>
                </div>
              ))}
            </div>
          </div>
        </div>
        <div className="w-full lg:w-96">
          <div className="relative w-full mb-4 lg:ml-4 bg-black rounded-lg p-3">
            <h1 className="text-white font-bold text-lg">
              Create your club now
            </h1>
            <p className="text-xs text-lightGray opacity-60">
              Connect with more like minded people and discover more things!
            </p>
            <img
              src="/img/create-club.png"
              className="w-20 h-20 absolute right-0 bottom-0"
            />
            <Button onClick={() => setOpen(true)} className="mt-4 text-sm">
              Get Started Now ðŸš€
            </Button>
          </div>
        </div>
      </div>{" "}
    </div>
  );
};

export default Post;
